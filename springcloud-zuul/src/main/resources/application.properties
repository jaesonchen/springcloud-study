spring.application.name = zuul-route

server.port = 9060

eureka.client.register-with-eureka = false
# 注册和发现服务Eureka Server地址，多个eureka以逗号分隔。
eureka.client.serviceUrl.defaultZone = http://localhost:8000/eureka/

# 动态路由 + ribbon 负载均衡路由/故障切换
zuul.routes.ribbon.path = /ribbon/**
zuul.routes.ribbon.serviceId = ribbon-consumer
zuul.routes.feign.path = /feign/**
zuul.routes.feign.serviceId = feign-consumer

# 静态路由 + ribbon 负载均衡路由/故障切换
#zuul.routes.hello-service.path = /hello-service/**
# 这里的serviceId是由用户手工命名的服务名称，配合<serviceId>.ribbon.listOfServers参数实现服务与实例的维护。
#zuul.routes.hello-service.serviceId = hello-service
# 由于zuul.routes.<route>.serviceId指定的是服务名称，默认情况下Ribbon会根据服务发现机制来获取配置服务名对应的实例清单。
# 但是，该实例并没有整合类似Eureka之类的服务治理框架，所以需要将该参数设置为false，不然配置的serviceId是获取不到对应实例清单的。
#ribbon.eureka.enabled = false
# 与zuul.routes.<route>.serviceId的配置相对应
#user-service.ribbon.listOfServers = http://localhost:9010/,http://localhost:9020/

# 静态路由
zuul.routes.baidu.path = /baidu/**
zuul.routes.baidu.url = http://www.baidu.com

# 对所有的path增加一个/api前缀
#zuul.prefix = /api